/**
 * @file Aolkme_error.h
 * @brief 错误代码内核
 * @author Aolkme
 * @
 * 
 */

// 头部引用格式






#ifndef AOLKME_ERROR_H
#define AOLKME_ERROR_H



// #pragma once






#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif


#ifdef __INTELLISENSE_PASS__
#define __attribute__(x) // 屏蔽GCC扩展属性
#define volatile // 忽略volatile警告
#endif



#define AOLKME_ERROR_MODULE_INDEX_OFFSET        16u             // 模块索引在32位中的起始位​（从0开始计数的第16位）
#define AOLKME_ERROR_MODULE_INDEX_MASK          0x00FF0000      // 模块索引的存储区域​（16-23位，共8位）
#define AOLKME_ERROR_RAW_CODE_OFFSET            0u              // ​原始错误码在32位中的起始位​（最低位）
#define AOLKME_ERROR_RAW_CODE_MASK              0x0000FFFF      // 原始错误码的存储区域​（0-15位，共16位）

/**
 * @brief AOLKME module and raw code.
 */
#if 0
#define AOLKME_ERROR_CODE(moduleIndex, rawErrCode) \            // 错误码编码
((uint32_t)(((((uint32_t)(moduleIndex)) << AOLKME_ERROR_MODULE_INDEX_OFFSET) & AOLKME_ERROR_MODULE_INDEX_MASK) | ((((uint32_t)(rawErrCode)) << AOLKME_ERROR_RAW_CODE_OFFSET) & AOLKME_ERROR_RAW_CODE_MASK) ))
#else
#define AOLKME_ERROR_CODE(moduleIndex, rawErrCode) \
    ( (uint32_t)((moduleIndex) << 16) | (rawErrCode) )
#endif



/**
 * @brief AOLKME module enum for defining error code.
 */
typedef enum{
    AOLKME_ERROR_MODULE_SYSTEM = 0,                     // 系统错误
    AOLKME_ERROR_MODULE_PLATFORM,                       // 平台错误
    AOLKME_ERROR_MODULE_CORE,                           // Core
    AOLKME_ERROR_MODULE_ERROR,                          // 错误系统
    AOLKME_ERROR_MODULE_USER,                           // 用户错误
    AOLKME_ERROR_MODULE_OSAL,                           // OSAL错误
    AOLKME_ERROR_MODULE_LOGGER,                         // 日志
    AOLKME_ERROR_MODULE_EVENT,                          // 事件
}E_AolkmeErrorModule;


/**
 * @brief Raw error code of system module.
 */
typedef enum{
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_SUCCESS = 0x00,        
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_INVALID_REQUEST_PARAMETER = 0x01,       // 无效的参数请求
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_NONSUPPORT = 0x02,                      // 不支持
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_TIMEOUT = 0x03,                         // 超时
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_INVALID_PARAMETER = 0x04,               // 无效输入参数
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_NONSUPPORT_IN_CURRENT_STATE = 0x05,     // 不支持当前状态
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_SYSTEM_ERROR = 0x06,                    // 系统错误
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_MODULE_INACTIVATED = 0x07,              // 模块尚未激活
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_HARDWARE_ERR = 0x08,                    // 硬件错误
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_UNKNOWN = 0x09,                         // 未知错误
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_NOT_FOUND = 0x0A,                       // 未找到
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_OUT_OF_RANGE = 0x0B,                    // 超出循环
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_BUSY = 0x0C,                            // 繁忙
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_QUEUE_FULL = 0x11,                      // 队列满
    AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_QUEUE_EMPTY = 0x12,                     // 队列空
}E_AolkmeErrorSystemModuleRawCode;


/**
 * @brief Raw error code of platform module.
 */
typedef enum{
    AOLKME_ERROR_PLATFORM_MODULE_RAW_CODE_SUCCESS = 0x00,
    AOLKME_ERROR_PLATFORM_MODULE_RAW_CODE_INVALID_PARAMETER = 0x01,
    AOLKME_ERROR_PLATFORM_MODULE_RAW_CODE_INVALID_REQUEST_PARAMETER = 0x02,
    AOLKME_ERROR_PLATFORM_MODULE_RAW_CODE_UNKNOWN = 0xFF,
}E_AolkmeErrorPlatformModuleRawCode;


/**
 * @brief Raw error code of core module.
 */
typedef enum{
    AOLKME_ERROR_CORE_MODULE_RAW_CODE_SUCCESS = 0x00,
    AOLKME_ERROR_CORE_MODULE_RAW_CODE_INVALID_PARAMETER = 0x01,
    AOLKME_ERROR_CORE_MODULE_RAW_CODE_INVALID_NAME,
    AOLKME_ERROR_CORE_MODULE_RAW_CODE_INVALID_ID,
    AOLKME_ERROR_CORE_MODULE_RAW_CODE_INVALID_KEY,
    AOLKME_ERROR_CORE_MODULE_RAW_CODE_INITIALIZATION_HAS_BEEN_DONE,
    AOLKME_ERROR_CORE_MODULE_RAW_CODE_INITIALIZATION_NOT_DONE,
    AOLKME_ERROR_CORE_MODULE_RAW_CODE_,
    AOLKME_ERROR_CORE_MODULE_RAW_CODE_UNKNOWN = 0xFF,
}E_AolkmeErrorCoreModuleRawCode;





typedef enum{
    AOLKME_ERROR_OSAL_MODULE_RAW_CODE_SUCCESS = 0x00,
    AOLKME_ERROR_OSAL_MODULE_RAW_CODE_INVALID_PARAMETER = 0x01,
    AOLKME_ERROR_OSAL_MODULE_RAW_CODE_INVALID_REQUEST_PARAMETER = 0x02,
    AOLKME_ERROR_OSAL_MODULE_RAW_CODE_MUTEXCREATE_FAILED = 0x03,
    AOLKME_ERROR_OSAL_MODULE_RAW_CODE_OUT_OF_MEMORY = 0x04,
    AOLKME_ERROR_OSAL_MODULE_RAW_CODE_UNKNOWN = 0xFF,
} T_AolkmeErrorOSALModuleRawCode;




/**
 * @brief Raw error code of logger module.
 */
typedef enum{
    AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_SUCCESS = 0x00,
    AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_CONFIG = 0x01,
    AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_FUNC = 0x02,
    AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_INVALID_PARAMETER = 0x03,
    AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_ERROR = 0x04,
    AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_INITIALIZATION_HAS_BEEN_DONE = 0x05,
    AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_INITIALIZATION_NOT_DONE = 0x06,
    AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_NO_RESOURCE = 0x07,
    AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_UNKNOWN = 0xFF,
}E_AolkmeErrorLoggerModuleRawCode;




typedef enum{
    AOLKME_ERROR_EVENT_MODULE_RAW_CODE_SUCCESS = 0x00,
    AOLKME_ERROR_EVENT_MODULE_RAW_CODE_INVALID_PARAMETER = 0x01,
    AOLKME_ERROR_EVENT_MODULE_RAW_CODE_INVALID_REQUEST_PARAMETER = 0x02,
    AOLKME_ERROR_EVENT_MODULE_RAW_CODE_INITIALIZATION_HAS_BEEN_DONE = 0x03,
    AOLKME_ERROR_EVENT_MODULE_RAW_CODE_INITIALIZATION_NOT_DONE = 0x04,
    AOLKME_ERROR_EVENT_MODULE_RAW_CODE_EVENT_QUEUE_FULL = 0x05,
    AOLKME_ERROR_EVENT_MODULE_RAW_CODE_OUT_OF_RESOURCES = 0x06,
    AOLKME_ERROR_EVENT_MODULE_RAW_CODE_HANDLER_NOT_FOUND = 0x07,
    AOLKME_ERROR_EVENT_MODULE_RAW_CODE_UNKNOWN = 0xFF,
}E_AolkmeErrorEventModuleRawCode;













/**
 * @brief Users can search all error messages here.
 */
enum AolkmeErrorCode{


    // System module error codes
    AOLKME_ERROR_SYSTEM_MODULE_CODE_SUCCESS = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_SYSTEM, AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_SUCCESS),
    AOLKME_ERROR_SYSTEM_MODULE_CODE_INVALID_REQUEST_PARAMETER = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_SYSTEM, AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_INVALID_REQUEST_PARAMETER),
    AOLKME_ERROR_SYSTEM_MODULE_CODE_TIMEOUT = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_SYSTEM, AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_TIMEOUT),
    AOLKME_ERROR_SYSTEM_MODULE_CODE_INVALID_PARAMETER = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_SYSTEM, AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_INVALID_PARAMETER),
    AOLKME_ERROR_SYSTEM_MODULE_CODE_UNKNOWN = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_SYSTEM, AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_UNKNOWN),
    AOLKME_ERROR_SYSTEM_MODULE_CODE_QUEUE_FULL = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_SYSTEM, AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_QUEUE_FULL),
    AOLKME_ERROR_SYSTEM_MODULE_CODE_QUEUE_EMPTY = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_SYSTEM, AOLKME_ERROR_SYSTEM_MODULE_RAW_CODE_QUEUE_EMPTY),

    // Platform module error codes
//    AOLKME_ERROR_PLATFORM_MODULE_CODE_SUCCESS = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_PLATFORM, AOLKME_ERROR_PLATFORM_MODULE_RAW_CODE_SUCCESS),
    AOLKME_ERROR_PLATFORM_MODULE_CODE_INVALID_PARAMETER = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_PLATFORM, AOLKME_ERROR_PLATFORM_MODULE_RAW_CODE_INVALID_PARAMETER),
    AOLKME_ERROR_PLATFORM_MODULE_CODE_INVALID_REQUEST_PARAMETER = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_PLATFORM, AOLKME_ERROR_PLATFORM_MODULE_RAW_CODE_INVALID_REQUEST_PARAMETER),
    AOLKME_ERROR_PLATFORM_MODULE_CODE_UNKNOWN = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_PLATFORM, AOLKME_ERROR_PLATFORM_MODULE_RAW_CODE_UNKNOWN),



    // Core module error codes
//    AOLKME_ERROR_CORE_MODULE_CODE_SUCCESS = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_CORE, AOLKME_ERROR_CORE_MODULE_RAW_CODE_SUCCESS),
    AOLKME_ERROR_CORE_MODULE_CODE_INVALID_PARAMETER = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_CORE, AOLKME_ERROR_CORE_MODULE_RAW_CODE_INVALID_PARAMETER),
    AOLKME_ERROR_CORE_MODULE_CODE_INVALID_NAME = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_CORE, AOLKME_ERROR_CORE_MODULE_RAW_CODE_INVALID_NAME),
    AOLKME_ERROR_CORE_MODULE_CODE_INVALID_ID = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_CORE, AOLKME_ERROR_CORE_MODULE_RAW_CODE_INVALID_ID),
    AOLKME_ERROR_CORE_MODULE_CODE_INVALID_KEY = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_CORE, AOLKME_ERROR_CORE_MODULE_RAW_CODE_INVALID_KEY),
    AOLKME_ERROR_CORE_MODULE_CODE_INITIALIZATION_HAS_BEEN_DONE = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_CORE, AOLKME_ERROR_CORE_MODULE_RAW_CODE_INITIALIZATION_HAS_BEEN_DONE),
    AOLKME_ERROR_CORE_MODULE_CODE_INITIALIZATION_NOT_DONE = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_CORE, AOLKME_ERROR_CORE_MODULE_RAW_CODE_INITIALIZATION_NOT_DONE),
    AOLKME_ERROR_CORE_MODULE_CODE_UNKNOWN = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_CORE, AOLKME_ERROR_CORE_MODULE_RAW_CODE_UNKNOWN),

    // OSAL module error codes
    AOLKME_ERROR_OSAL_MODULE_CODE_INVALID_PARAMETER = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_OSAL, AOLKME_ERROR_OSAL_MODULE_RAW_CODE_INVALID_PARAMETER),
    AOLKME_ERROR_OSAL_MODULE_CODE_INVALID_REQUEST_PARAMETER = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_OSAL, AOLKME_ERROR_OSAL_MODULE_RAW_CODE_INVALID_REQUEST_PARAMETER),
    AOLKME_ERROR_OSAL_MODULE_CODE_MUTEXCREATE_FAILED = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_OSAL, AOLKME_ERROR_OSAL_MODULE_RAW_CODE_MUTEXCREATE_FAILED),
    AOLKME_ERROR_OSAL_MODULE_CODE_OUT_OF_MEMORY = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_OSAL, AOLKME_ERROR_OSAL_MODULE_RAW_CODE_OUT_OF_MEMORY),

    // Logger module error codes
//    AOLKME_ERROR_LOGGER_MODULE_CODE_SUCCESS = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_LOGGER, AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_SUCCESS),
    AOLKME_ERROR_LOGGER_MODULE_CODE_INVALID_PARAMETER = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_LOGGER, AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_INVALID_PARAMETER),
    AOLKME_ERROR_LOGGER_MODULE_CODE_CONFIG = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_LOGGER, AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_CONFIG),
    AOLKME_ERROR_LOGGER_MODULE_CODE_INITIALIZATION_HAS_BEEN_DONE = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_LOGGER, AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_INITIALIZATION_HAS_BEEN_DONE),
    AOLKME_ERROR_LOGGER_MODULE_CODE_INITIALIZATION_NOT_DONE = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_LOGGER, AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_INITIALIZATION_NOT_DONE),
    AOLKME_ERROR_LOGGER_MODULE_CODE_NO_RESOURCE = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_LOGGER, AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_NO_RESOURCE),
    AOLKME_ERROR_LOGGER_MODULE_CODE_UNKNOWN = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_LOGGER, AOLKME_ERROR_LOGGER_MODULE_RAW_CODE_UNKNOWN),


    // Event module error codes
//    AOLKME_ERROR_EVENT_MODULE_CODE_SUCCESS = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_EVENT, AOLKME_ERROR_EVENT_MODULE_RAW_CODE_SUCCESS),
    AOLKME_ERROR_EVENT_MODULE_CODE_INVALID_PARAMETER = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_EVENT, AOLKME_ERROR_EVENT_MODULE_RAW_CODE_INVALID_PARAMETER),
    AOLKME_ERROR_EVENT_MODULE_CODE_INVALID_REQUEST_PARAMETER = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_EVENT, AOLKME_ERROR_EVENT_MODULE_RAW_CODE_INVALID_REQUEST_PARAMETER),
    AOLKME_ERROR_EVENT_MODULE_CODE_INITIALIZATION_HAS_BEEN_DONE = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_EVENT, AOLKME_ERROR_EVENT_MODULE_RAW_CODE_INITIALIZATION_HAS_BEEN_DONE),
    AOLKME_ERROR_EVENT_MODULE_CODE_INITIALIZATION_NOT_DONE = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_EVENT, AOLKME_ERROR_EVENT_MODULE_RAW_CODE_INITIALIZATION_NOT_DONE),
    AOLKME_ERROR_EVENT_MODULE_CODE_EVENT_QUEUE_FULL = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_EVENT, AOLKME_ERROR_EVENT_MODULE_RAW_CODE_EVENT_QUEUE_FULL),
    AOLKME_ERROR_EVENT_MODULE_CODE_OUT_OF_RESOURCES = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_EVENT, AOLKME_ERROR_EVENT_MODULE_RAW_CODE_OUT_OF_RESOURCES),
    AOLKME_ERROR_EVENT_MODULE_CODE_HANDLER_NOT_FOUND = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_EVENT, AOLKME_ERROR_EVENT_MODULE_RAW_CODE_HANDLER_NOT_FOUND),
    AOLKME_ERROR_EVENT_MODULE_CODE_UNKNOWN = AOLKME_ERROR_CODE(AOLKME_ERROR_MODULE_EVENT, AOLKME_ERROR_EVENT_MODULE_RAW_CODE_UNKNOWN),
    



};




























#ifdef __cplusplus
}
#endif



#endif // AOLKME_H

